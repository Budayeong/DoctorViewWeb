<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.springboot.hospital.IHospitalService">

	<!-- 병원 목록 -->
	<select id="getAllHospitals" resultType="com.edu.springboot.hospital.HospitalAppDTO">
		SELECT
			member.id, api.name, member.nickname, api.tel, api.address, member.department,
			detail.pcr, detail.system
		FROM detail
		JOIN member ON detail.hosp_ref = member.id
		JOIN api ON member.name = api.name
	</select>
	
	
	<!-- 병원 상세정보 목록 -->
	<select id="getAllHDetails" resultType="com.edu.springboot.hospital.DetailDTO">
		SELECT * FROM detail
	</select>
	<!-- 병원 리뷰 목록 -->
	<select id="getAllHReviews" resultType="com.edu.springboot.hospital.HreviewDTO">
		SELECT * FROM hreview WHERE review_idx = original_idx
	</select>	
	<!-- 병원 리뷰의 답변 목록 -->
	<select id="getAllHReplies" resultType="com.edu.springboot.hospital.HreviewDTO">
		SELECT * FROM hreview WHERE review_idx != original_idx
	</select>
	<!-- 전체 해시태그 목록 -->
	<select id="getAllHashtags" resultType="com.edu.springboot.hospital.HashtagDTO">
		SELECT * FROM hashtag
	</select>
	
	
	<!-- 병원 API 목록: 병원 API의 레코드 개수를 카운트 -->
	<select id="countHospApi"
		resultType="int"
		parameterType="com.edu.springboot.hospital.ParameterDTO">
		SELECT COUNT(*) FROM api
	</select>

	<!-- 병원 API 목록: 병원 API에서 한 페이지에 출력할 레코드를 인출 -->
	<select id="listHospApi"
			resultType="com.edu.springboot.hospital.HospitalDTO"
			parameterType="com.edu.springboot.hospital.ParameterDTO">
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM (
				SELECT * FROM api
				ORDER BY api_idx DESC
			) Tb
		)
		WHERE rNum <![CDATA[>=]]> #{start} AND rNum <![CDATA[<=]]> #{end}
	</select>
	
	<!-- 병원 검색: 검색에 만족하는 병원 개수 카운트 -->
	<select id="countSearchHosp"
		resultType="int"
		parameterType="com.edu.springboot.hospital.ParameterDTO">
		SELECT COUNT(*) FROM api
	</select>
	
	
	
	
	
	<!-- 병원 검색 개수 -->
	<select id="countSelectHosp"
		resultType="int"
		parameterType="com.edu.springboot.hospital.ParameterDTO">
		SELECT COUNT(*) FROM api
		WHERE 1 = 1
		<!-- 검색어 -->
		<if test="param5 != null and param5.trim() != ''">
			AND ${param4} LIKE '%' || #{param5} || '%'
		</if>
		<!-- 시도 선택 -->
		<if test="param1 != null and param1.trim() != ''">
			AND address LIKE '%' || #{param1} || '%'
		</if>
		<!-- 시군구 선택 -->
		<if test="param2 != null and param2.trim() != ''">
			AND address LIKE '%' || #{param2} || '%'
		</if>
		<!-- 읍면동 선택 -->
		<if test="param3 != null and param3.trim() != ''">
			AND address LIKE '%' || #{param3} || '%'
		</if>
           <!-- 필터 처리 -->
           <if test="param6 != null and param6.size() != 0">
           	AND api_idx IN (
           		SELECT api.api_idx FROM member
           		INNER JOIN api on member.name = api.name
           		WHERE member.id IN (
           			SELECT hosp_ref FROM DETAIL
           			WHERE 1 = 1
           			<if test="param6.contains('parking')">
           				AND parking = 'Y'
           			</if>
           			<if test="param6.contains('pcr')">
           				AND pcr = 'Y'
           			</if>
           			<if test="param6.contains('hospitalize')">
           				AND hospitalize = 'Y'
           			</if>
           			<if test="param6.contains('system')">
           				AND system = 'Y'
           			</if>
           		)
           	)
           </if>
           ORDER BY api_idx DESC
	</select>
	
	<!-- 병원 검색 -->
	<select id="listSearchHosp"
		parameterType="map"
		resultType="com.edu.springboot.hospital.HospitalDTO">
	    SELECT * FROM (
	        SELECT Tb.*, rownum rNum FROM (
	            SELECT * FROM api
	            WHERE 1 = 1
				<!-- 검색어 -->
			    <if test="param5 != null and param5.trim() != ''">
			        <if test="param4 != 'hashtag'">
			            AND ${param4} LIKE '%' || #{param5} || '%'
			        </if>
			        <if test="param4 == 'hashtag'">
			            AND api_idx IN (
			            	SELECT api.api_idx FROM member
		            		INNER JOIN api on member.name = api.name
		            		WHERE member.id IN (
		            			SELECT hosp_ref FROM hashtag
		            			WHERE tag LIKE '%' || #{param5} || '%'
		            		)
			            )
			        </if>
			    </if>
				<!-- 시도 선택 -->
				<if test="param1 != null and param1.trim() != ''">
					AND address LIKE '%' || #{param1} || '%'
				</if>
				<!-- 시군구 선택 -->
				<if test="param2 != null and param2.trim() != ''">
					AND address LIKE '%' || #{param2} || '%'
				</if>
				<!-- 읍면동 선택 -->
				<if test="param3 != null and param3.trim() != ''">
					AND address LIKE '%' || #{param3} || '%'
				</if>
	            <!-- 필터 처리 -->
	            <if test="param6 != null and param6.size() != 0">
	            	AND api_idx IN (
	            		SELECT api.api_idx FROM member
	            		INNER JOIN api on member.name = api.name
	            		WHERE member.id IN (
	            			SELECT hosp_ref FROM DETAIL
	            			WHERE 1 = 1
	            			<if test="param6.contains('parking')">
	            				AND parking = 'Y'
	            			</if>
	            			<if test="param6.contains('pcr')">
	            				AND pcr = 'Y'
	            			</if>
	            			<if test="param6.contains('hospitalize')">
	            				AND hospitalize = 'Y'
	            			</if>
	            			<if test="param6.contains('system')">
	            				AND system = 'Y'
	            			</if>
	            		)
	            	)
	            </if>
	            ORDER BY api_idx DESC
	        ) Tb
	    )
	   	WHERE rNum <![CDATA[>=]]> #{param7} AND rNum <![CDATA[<=]]> #{param8}
	</select>
	
	<!-- 병원 API 조회 -->
	<select id="viewHospApi"
		resultType="com.edu.springboot.hospital.HospitalDTO"
		parameterType="com.edu.springboot.hospital.HospitalDTO">
		SELECT * FROM api WHERE api_idx=#{api_idx}
	</select>
	
	
	
	<!-- 병원 입점 여부 확인: 병원이름으로 입점 여부를 확인하여 아이디 추출 -->
	<select id="selectHospId">
		SELECT id FROM member WHERE name=#{param1}
	</select>
	
	<!-- 입점 병원 기본정보 조회 -->
	<select id="viewHosp"
		resultType="com.edu.springboot.hospital.BasicDTO">
		SELECT * FROM member WHERE id=#{id}
	</select>
	
	
	
	<!-- 해시태그 목록: 해시태그 목록 -->
	<select id="listHashtag"
		resultType="com.edu.springboot.hospital.HashtagDTO">
		SELECT * FROM hashtag
	</select>
	
	<!-- 병원 해시태그: 특정 병원 해시태그 목록 -->
	<select id="selectHospHashtag"
		resultType="com.edu.springboot.hospital.HashtagDTO">
		SELECT * FROM hashtag WHERE hosp_ref=#{id}
	</select>
	
	
	
	
	<!-- 입점 병원 상세정보 조회 -->
	<select id="selectDetail"
		resultType="com.edu.springboot.hospital.DetailDTO">
		SELECT * FROM detail WHERE hosp_ref=#{id}
	</select>
	
	
	<select id="listDoctor"
		resultType="com.edu.springboot.doctor.DoctorDTO">
		SELECT * FROM doctor WHERE hosp_ref=#{id}
	</select>
	
	<insert id="writeDoctor" parameterType="com.edu.springboot.member.DoctorDTO">
	    INSERT INTO doctor (doc_idx, name, major, career, photo, hours, hosp_ref)
	    VALUES (seq_doctor_idx.nextval, #{name}, #{major}, #{career}, 
            <if test="photo != null">#{photo}</if>
            <if test="photo == null">NULL</if>, 
        #{hours}, #{hosp_ref})
	</insert>
	
	
	
	
	<!-- 리뷰 목록: 병원에 해당하는 리뷰를 인출 -->
	<select id="listReview"
		resultType="com.edu.springboot.hospital.HreviewDTO"
		parameterType="com.edu.springboot.hospital.HospitalDTO">
		SELECT * FROM hreview WHERE api_ref=#{api_idx}
		ORDER BY review_idx DESC
	</select>

	<!-- 리뷰 작성 -->
	<insert id="writeReview" parameterType="map" useGeneratedKeys="true" keyProperty="review_idx">
	    <selectKey keyProperty="review_idx" resultType="int" order="BEFORE">
	        SELECT seq_hreview_idx.nextval FROM dual
	    </selectKey>
	    INSERT INTO hreview (review_idx, original_idx, score, content, cost, treat, doctor, writer_ref, api_ref)
	    VALUES (#{review_idx}, #{review_idx}, #{score}, #{content},
	        <if test="cost != null">#{cost}</if>
	        <if test="cost == null">NULL</if>,
	        <if test="treat != null">#{treat}</if>
	        <if test="treat == null">NULL</if>,
	        <if test="doctor != null">#{doctor}</if>
	        <if test="doctor == null">NULL</if>,
	        #{loginId}, #{api_idx}
	    )
	</insert>


	<!-- 리뷰 해시태그 작성 -->
	<insert id="writeReviewHashtag">
		INSERT INTO hashtag (tag_idx, hreview_ref, tag) VALUES (seq_hashtag_idx.nextval, #{param1}, #{param2})
	</insert>
	
	<!-- 리뷰의 모든 해시태그 삭제 -->
	<delete id="deleteAllReviewHashtag">
		DELETE FROM hashtag WHERE hreview_ref=#{param1}
	</delete>
	
	
	


	
	<!-- 리뷰 수정 -->
	<update id="editReview" parameterType="map" >
		UPDATE hreview SET score=#{score}, content=#{content}
			<if test="cost != null">, cost=#{cost}</if>
			<if test="treat != null">, treat=#{treat}</if>
			<if test="doctor != null">, doctor=#{doctor}</if>
		, rewrite='T'
		WHERE review_idx=#{review_idx}
	</update>
	
	<!-- 리뷰 삭제 -->
	<delete id="deleteReview">
		DELETE FROM dreview WHERE review_idx=#{param1}
	</delete>
	
	<!-- 답변 작성 -->
	<insert id="writeReply">
		INSERT INTO hreview (review_idx, original_idx, content, writer_ref, api_ref)
		VALUES (seq_hreview_idx.nextval, #{param1}, #{param2}, #{param3}, #{param4})
	</insert>
	
	<!-- 답변 수정 -->
	<update id="editReply">
		UPDATE hreview SET content=#{param2}, rewrite='T'
		WHERE review_idx=#{param1}
	</update>
	
	<!-- 답변 삭제 -->
	<delete id="deleteReply">
		DELETE FROM hreview WHERE review_idx=#{param1}
	</delete>
	
	<!-- 리뷰 삭제에 대한 답변 삭제 -->
	<delete id="deleteAllReply">
		DELETE FROM hreview WHERE original_idx=#{param1}
	</delete>
	
	
	
	<!-- 닉네임 인출: 리뷰 작성자 닉네임 인출 -->
	<select id="selectReviewNickname"
		parameterType="com.edu.springboot.hospital.HreviewDTO">
		SELECT nickname FROM member WHERE id=#{writer_ref}
	</select>
	
	
	
	<!-- 병원 좋아요: 병원 좋아요 수 조회 -->
	<select id="countHospLike">
		SELECT COUNT(*) FROM likes WHERE tablename='hospital' AND recodenum=#{param1}
	</select>
	
	<!-- 병원 좋아요: 병원 졸아요 레코드 존재 여부 확인 -->
	<select id="checkHospLike">
		SELECT COUNT(*) FROM likes WHERE tablename='hospital' AND member_ref=#{param1} AND recodenum=#{param2}
	</select>
	
	<!-- 병원 좋아요: 병원 좋아요 수 증가 -->
	<insert id="plusHospLike">
		INSERT INTO likes VALUES (seq_likes_idx.nextval, #{param1}, 'hospital', #{param2})
	</insert>
	
	<!-- 병원 좋아요: 병원 좋아요 수 감소 -->
	<delete id="minusHospLike">
		DELETE FROM likes WHERE tablename='hospital' AND member_ref=#{param1} AND recodenum=#{param2}
	</delete>
	
	
	
	<!-- 리뷰 좋아요: 리뷰 좋아요 수 조회 -->
	<select id="countReviewLike">
		SELECT COUNT(*) FROM likes WHERE tablename='hreview' AND recodenum=#{param1}
	</select>
	
	<!-- 리뷰 좋아요: 리뷰 좋아요 레코드 존재 여부 확인 -->
	<select id="checkReviewLike">
		SELECT COUNT(*) FROM likes WHERE tablename='hreview' AND member_ref=#{param1} AND recodenum=#{param2}
	</select>
	
	<!-- 리뷰 좋아요: 리뷰 좋아요 수 증가 -->
	<insert id="plusReviewLike">
		INSERT INTO likes VALUES (seq_likes_idx.nextval, #{param1}, 'hreview', #{param2})
	</insert>
	
	<!-- 리뷰 좋아요: 리뷰 좋아요 수 감소 -->
	<delete id="minusReviewLike">
		DELETE FROM likes WHERE tablename='hreview' AND member_ref=#{param1} AND recodenum=#{param2}
	</delete>
	
	<!-- 리뷰 좋아요: 리뷰 삭제에 의한 리뷰 좋아요 일괄 삭제 -->
	<delete id="deleteAllLike">
		DELETE FROM likes WHERE tablename='hreview' AND recodenum=#{param1}
	</delete>
	
	
	
	<!-- 리뷰 수 조회 -->
	<select id="countReview">
		SELECT COUNT(*) FROM hreview WHERE review_idx=original_idx AND api_ref=#{param1}
	</select>
	
	<!-- 별점 합계 조회 -->
	<select id="sumScore" resultType="int">
		SELECT COALESCE(SUM(score), 0)
		FROM hreview WHERE api_ref=#{param1}
	</select>
	
	
	
	
	
	
	
	
	<!-- 주소 동적 셀렉트: 시도를 인출 -->
	<select id="selectSido"
		resultType="com.edu.springboot.hospital.AddressDTO">
		SELECT sido FROM address
		GROUP BY sido ORDER BY sido ASC	
	</select>
	
	<!-- 주소 동적 셀렉트: 시도에 해당하는 시구군을 인출 -->
	<select id="selectGugun"
		parameterType="com.edu.springboot.hospital.AddressDTO"
		resultType="com.edu.springboot.hospital.AddressDTO">
		SELECT gugun FROM address
		WHERE sido=#{sido}
		GROUP BY gugun ORDER BY gugun DESC
	</select>
	
	<!-- 주소 동적 셀렉트: 시구군에 해당하는 읍면동을 인출 -->
	<select id="selectDong"
		parameterType="com.edu.springboot.hospital.AddressDTO"
		resultType="com.edu.springboot.hospital.AddressDTO">
		SELECT DISTINCT dong FROM address
		WHERE gugun=#{gugun} ORDER BY dong DESC
	</select>
	
	
	
	
	
	
	
	
	
	
	
	<!-- 지도에 표시할 병원 목록 -->
	<select id="listHospMark"
		parameterType="com.edu.springboot.hospital.ParameterDTO"
		resultType="com.edu.springboot.hospital.HospitalDTO">
		SELECT * FROM api
		<if test="searchWord!=null and !searchWord.equals('')">
			WHERE ${searchField} LIKE '%'||#{searchWord}||'%'
		</if>
		ORDER BY api_idx DESC
	</select>
	
	
	
	
	
	

</mapper>